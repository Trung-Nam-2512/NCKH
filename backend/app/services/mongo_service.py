"""
D·ªäCH V·ª§ MONGODB (MONGO SERVICE) - Qu·∫£n l√Ω k·∫øt n·ªëi v√† operations v·ªõi MongoDB Atlas

Ch·ª©c nƒÉng ch√≠nh:
- Qu·∫£n l√Ω k·∫øt n·ªëi async ƒë·∫øn MongoDB Atlas cloud database
- Theo d√µi v√† ghi nh·∫≠n l∆∞·ª£t truy c·∫≠p h·ªá th·ªëng
- Th·ªëng k√™ usage v√† analytics
- CRUD operations cho d·ªØ li·ªáu persistent
- Connection pooling v√† error recovery

S·ª≠ d·ª•ng Motor driver:
- Async/await support cho non-blocking operations
- Connection pooling t·ª± ƒë·ªông
- Retry logic built-in
- Compatible v·ªõi FastAPI async framework
"""

import motor.motor_asyncio  # MongoDB async driver
from typing import Dict, Any
from datetime import datetime, date
import logging
from ..config import config  # Import c·∫•u h√¨nh MONGO_URI

class MongoService:
    """
    D·ªäCH V·ª§ QU·∫¢N L√ù MONGODB
    
    Service n√†y qu·∫£n l√Ω to√†n b·ªô t∆∞∆°ng t√°c v·ªõi MongoDB database.
    S·ª≠ d·ª•ng Singleton pattern ƒë·ªÉ maintain connection pool v√† avoid
    multiple connection overhead.
    
    Attributes:
        client: Motor AsyncIOMotorClient instance
        db: Database instance
        visit_collection: Collection ƒë·ªÉ tracking visits
    """
    
    def __init__(self):
        """
        Kh·ªüi t·∫°o MongoService v√† thi·∫øt l·∫≠p k·∫øt n·ªëi
        
        Automatically connect ƒë·∫øn MongoDB khi service ƒë∆∞·ª£c kh·ªüi t·∫°o.
        S·ª≠ d·ª•ng lazy connection - connection s·∫Ω ƒë∆∞·ª£c establish khi c·∫ßn.
        """
        self.client = None              # MongoDB client instance
        self.db = None                  # Database instance
        self.visit_collection = None    # Collection cho visit tracking
        self._connect()                 # Thi·∫øt l·∫≠p k·∫øt n·ªëi ngay khi init

    def _connect(self):
        """
        Thi·∫øt l·∫≠p k·∫øt n·ªëi ƒë·∫øn MongoDB Atlas cloud database
        
        Connection process:
        1. Ki·ªÉm tra MONGO_URI trong config
        2. T·∫°o async client v·ªõi connection string
        3. Ch·ªçn database v√† collection
        4. Log status k·∫øt n·ªëi
        
        Raises:
            ValueError: Khi MONGO_URI kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh
            Exception: Khi k·∫øt n·ªëi th·∫•t b·∫°i
        """
        try:
            # Ki·ªÉm tra xem c√≥ MONGO_URI trong config kh√¥ng
            if not config.MONGO_URI:
                raise ValueError(
                    "MONGO_URI kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env. "
                    "Vui l√≤ng th√™m MONGO_URI=mongodb+srv://... v√†o file .env"
                )
            
            # T·∫°o async MongoDB client v·ªõi connection pooling
            self.client = motor.motor_asyncio.AsyncIOMotorClient(config.MONGO_URI)
            
            # Ch·ªçn database v√† collection (s·ª≠ d·ª•ng existing database)
            self.db = self.client.visits_db                    # Database name
            self.visit_collection = self.db.visits             # Collection cho visits
            
            logging.info("‚úÖ K·∫øt n·ªëi MongoDB Atlas th√†nh c√¥ng")
            
        except Exception as e:
            logging.error(f"‚ùå L·ªói k·∫øt n·ªëi MongoDB: {str(e)}")
            # Re-raise exception ƒë·ªÉ caller c√≥ th·ªÉ handle
            raise

    async def record_visit(self) -> bool:
        """
        Ghi nh·∫≠n m·ªôt l∆∞·ª£t truy c·∫≠p h·ªá th·ªëng v√†o database
        
        M·ªói l·∫ßn user truy c·∫≠p h·ªá th·ªëng, m·ªôt document s·∫Ω ƒë∆∞·ª£c t·∫°o ƒë·ªÉ:
        - Theo d√µi usage patterns
        - Analytics v√† reporting
        - Monitor system activity
        - Compliance v√† audit trails
        
        Document structure:
        {
            "timestamp": datetime,     # Th·ªùi ƒëi·ªÉm truy c·∫≠p (UTC)
            "_id": ObjectId           # Auto-generated unique ID
        }
        
        Returns:
            bool: True n·∫øu ghi nh·∫≠n th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            # L·∫•y timestamp hi·ªán t·∫°i (UTC ƒë·ªÉ consistency across timezones)
            now = datetime.utcnow()
            
            # T·∫°o v√† insert document m·ªõi cho l∆∞·ª£t truy c·∫≠p
            await self.visit_collection.insert_one({
                "timestamp": now
            })
            
            logging.info(f"üìä ƒê√£ ghi nh·∫≠n l∆∞·ª£t truy c·∫≠p: {now.strftime('%Y-%m-%d %H:%M:%S')} UTC")
            return True
            
        except Exception as e:
            logging.error(f"L·ªói ghi l∆∞·ª£t truy c·∫≠p: {str(e)}")
            return False

    async def get_visit_stats(self) -> Dict[str, Any]:
        """L·∫•y th·ªëng k√™ l∆∞·ª£t truy c·∫≠p"""
        try:
            # L·∫•y t·ªïng s·ªë l∆∞·ª£t truy c·∫≠p
            total_visits = await self.visit_collection.count_documents({})
            
            # L·∫•y th·ªëng k√™ theo ng√†y (7 ng√†y g·∫ßn nh·∫•t)
            from datetime import timedelta
            seven_days_ago = datetime.utcnow() - timedelta(days=7)
            
            # Pipeline ƒë·ªÉ t√≠nh s·ªë l∆∞·ª£t truy c·∫≠p theo ng√†y
            pipeline = [
                {
                    "$match": {
                        "timestamp": {"$gte": seven_days_ago}
                    }
                },
                {
                    "$group": {
                        "_id": {
                            "$dateToString": {
                                "format": "%Y-%m-%d",
                                "date": "$timestamp"
                            }
                        },
                        "daily_visits": {"$sum": 1}
                    }
                },
                {
                    "$sort": {"_id": 1}
                }
            ]
            
            recent_stats = await self.visit_collection.aggregate(pipeline).to_list(7)
            
            # T·∫°o dict cho daily_stats
            daily_stats = {}
            for stat in recent_stats:
                daily_stats[stat["_id"]] = stat["daily_visits"]
            
            return {
                "total_visits": total_visits,
                "daily_stats": daily_stats
            }
        except Exception as e:
            logging.error(f"L·ªói l·∫•y th·ªëng k√™ l∆∞·ª£t truy c·∫≠p: {str(e)}")
            return {
                "total_visits": 0,
                "daily_stats": {}
            }

    async def close_connection(self):
        """ƒê√≥ng k·∫øt n·ªëi MongoDB"""
        if self.client:
            self.client.close()
            logging.info("ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB") 