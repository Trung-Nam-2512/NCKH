#!/usr/bin/env python3
"""
Quick Start Script
- Test to√†n b·ªô h·ªá th·ªëng t√≠ch h·ª£p realtime
- Thu th·∫≠p d·ªØ li·ªáu m·∫´u
- T√≠ch h·ª£p ph√¢n t√≠ch t·∫ßn su·∫•t
"""

import asyncio
import logging
from datetime import datetime
from manage_collector import CollectorManager
from frequency_integration import FrequencyIntegration

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

async def quick_test():
    """Test nhanh to√†n b·ªô h·ªá th·ªëng"""
    print("üöÄ QUICK START - REALTIME INTEGRATION SYSTEM")
    print("=" * 50)
    
    # 1. Test k·∫øt n·ªëi
    print("\n1Ô∏è‚É£ Testing connections...")
    manager = CollectorManager()
    connection_ok = await manager.test_connection()
    
    if not connection_ok:
        print("‚ùå Connection test failed. Please check your configuration.")
        return False
    
    print("‚úÖ All connections OK!")
    
    # 2. Thu th·∫≠p d·ªØ li·ªáu m·∫´u
    print("\n2Ô∏è‚É£ Collecting sample data (3 days)...")
    try:
        result = await manager.collect_manual(3)
        print(f"‚úÖ Collected {result.get('total_records', 0)} records")
    except Exception as e:
        print(f"‚ùå Data collection failed: {e}")
        return False
    
    # 3. Xem th·ªëng k√™
    print("\n3Ô∏è‚É£ Checking statistics...")
    await manager.show_stats()
    
    # 4. T√≠ch h·ª£p ph√¢n t√≠ch t·∫ßn su·∫•t
    print("\n4Ô∏è‚É£ Frequency analysis integration...")
    integration = FrequencyIntegration()
    
    # Xu·∫•t d·ªØ li·ªáu
    df = await integration.export_for_analysis()
    if not df.empty:
        print(f"‚úÖ Exported {len(df)} records for frequency analysis")
    
    # T·∫°o b√°o c√°o
    report = await integration.generate_frequency_report()
    if report:
        print("‚úÖ Frequency analysis report generated")
    
    # 5. T·ªïng k·∫øt
    print("\n" + "=" * 50)
    print("üéâ QUICK START COMPLETED SUCCESSFULLY!")
    print("\nüìä System Status:")
    print("   ‚úÖ API connections: OK")
    print("   ‚úÖ MongoDB: OK")
    print("   ‚úÖ Data collection: OK")
    print("   ‚úÖ Frequency integration: OK")
    
    print("\nüìÅ Generated Files:")
    print("   - realtime_frequency_data.csv")
    print("   - frequency_analysis_report.json")
    print("   - auto_collector.log")
    
    print("\nüöÄ Next Steps:")
    print("   1. Start auto collector: python manage_collector.py start")
    print("   2. Monitor logs: tail -f auto_collector.log")
    print("   3. Check stats: python manage_collector.py stats")
    
    return True

async def main():
    """H√†m ch√≠nh"""
    try:
        success = await quick_test()
        if success:
            print("\nüéØ System is ready for production use!")
        else:
            print("\n‚ùå Quick start failed. Please check the logs.")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Quick start interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Unexpected error: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 